@using System.Globalization;
@using System.Text;

<div class="row mb-3">
    @for (var i = 0; i < Months; i++) {
        var referenceDate = ReferenceDate.AddMonths(i);

        <div class="col-12 col-md-6 col-xl-4">
            <h2 class="text-center">@referenceDate.ToString("MMMM yyyy", new CultureInfo("en-US"))</h2>

            <div class="calendar-month">
                <div class="calendar-day-header">Sun</div>
                <div class="calendar-day-header">Mon</div>
                <div class="calendar-day-header">Tue</div>
                <div class="calendar-day-header">Wed</div>
                <div class="calendar-day-header">Thu</div>
                <div class="calendar-day-header">Fri</div>
                <div class="calendar-day-header">Sat</div>

                @for (var day = 1; day < DateTime.DaysInMonth(referenceDate.Year, referenceDate.Month); day++) {
                    var date = new DateTime(referenceDate.Year, referenceDate.Month, day);
                    var marginLeft = (0.1428 * (day == 1 ? (int)date.DayOfWeek : 0)).ToString("0.00%", CultureInfo.InvariantCulture);
                    var cssClass = HighlightedDates.Contains(date) ? "calendar-day-highlighted" : "calendar-day";

                    <div class="@cssClass" style="margin-left: @marginLeft">@day</div>
                }
            </div>
        </div>
    }
</div>

<div class="d-flex justify-content-between mb-3">
    <button class="btn btn-secondary" @onclick="PreviousMonth">Previous month</button>
    <button class="btn btn-secondary" @onclick="NextMonth">Next month</button>
</div>

@code {
    [Parameter]
    [EditorRequired]
    public int Months { get; set; }

    [Parameter]
    [EditorRequired]
    public Recurrence Recurrence { get; set; } = null!;

    private DateTime ReferenceDate { get; set; }
    private HashSet<DateTime> HighlightedDates { get; set; } = null!;

    protected override void OnParametersSet() {
        SetDates(Recurrence.StartDate == DateTime.MinValue ? DateTime.Today : Recurrence.StartDate);
    }

    private void PreviousMonth() {
        SetDates(ReferenceDate.AddMonths(-1));
    }

    private void NextMonth() {
        SetDates(ReferenceDate.AddMonths(1));
    }

    private void SetDates(DateTime newReferenceDate) {
        ReferenceDate = newReferenceDate.AddDays(1 - newReferenceDate.Day);
        HighlightedDates = Recurrence.GetDates(ReferenceDate, ReferenceDate.AddMonths(Months).AddDays(-1)).ToHashSet();
    }
}
