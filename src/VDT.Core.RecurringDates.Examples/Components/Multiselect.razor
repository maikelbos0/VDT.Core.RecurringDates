@typeparam TItem

<GlobalEventHandler OnClick="TryClose" />

<div class="position-relative" @onclick="PreventClosing">
    <div class="form-multiselect-header" data-is-open="@IsOpen" @onclick="Toggle">
        @Header
    </div>

    @if (IsOpen) {
        <div class="form-multiselect-items">
            @foreach (var item in Items) {
                var id = $"multiselect-item-{Guid.NewGuid()}";

                <div class="form-check">
                    <input class="form-check-input" type="checkbox" id="@id" checked="@SelectedItems.Contains(item.Key)" @onchange="() => OnItemSelectedChange(item.Key)" />
                    <label class="form-check-label" for="@id">@item.Description</label>
                </div>
            }
        </div>
    }
</div>

@code {
    private bool ShouldPreventClosing { get; set; } = false;
    private bool IsOpen { get; set; } = false;
    private string Header => string.Join(", ", Items.Where(item => SelectedItems.Contains(item.Key)).Select(item => item.Description).DefaultIfEmpty("(none selected)"));

    [Parameter]
    public List<TItem> SelectedItems { get; set; } = new();

    [Parameter]
    public EventCallback<List<TItem>> SelectedItemsChanged { get; set; }

    [EditorRequired]
    [Parameter]
    public List<(TItem Key, string Description)> Items { get; set; } = new();

    private async Task OnItemSelectedChange(TItem item) {
        if (SelectedItems.Contains(item)) {
            SelectedItems.Remove(item);
        }
        else {
            SelectedItems.Add(item);
        }

        await SelectedItemsChanged.InvokeAsync(SelectedItems);
    }

    private void Toggle() {
        IsOpen = !IsOpen;
    }

    private void PreventClosing() {
        ShouldPreventClosing = true;
    }

    private void TryClose() {
        if (!ShouldPreventClosing) {
            IsOpen = false;
        }

        ShouldPreventClosing = false;
    }
}
