@page "/DailyPattern"

<h1>Daily pattern</h1>

<p>
    Use below form to build a recurrence that has a pattern that occurs every day or every several days.  The recurrence is built using fluent builder
    syntax on a recurrence builder.
</p>

<div class="row">
    <div class="col-12 col-md-6 col-xl-4 mb-3">
        <label for="startDate" class="form-label">Start date</label>
        <input type="date" class="form-control" id="startDate" @bind-value="@StartDate" />
    </div>

    <div class="col-12 col-md-6 col-xl-4 mb-3">
        <label for="endDate" class="form-label">End date</label>
        <input type="date" class="form-control" id="endDate" @bind-value="@EndDate" />
    </div>

    <div class="col-12 col-md-6 col-xl-4 mb-3">
        <label for="occurrences" class="form-label">Occurrences</label>
        <input type="number" class="form-control" id="occurrences" @bind-value="@Occurrences" min="1" />
    </div>

    <div class="col-12 col-md-6 col-xl-4 mb-3">
        <label for="interval" class="form-label">Interval</label>
        <input type="number" class="form-control" id="interval" @bind-value="@Interval" min="1" />
    </div>

    <div class="col-12 col-md-6 col-xl-4 mb-3">
        <label for="referenceDate" class="form-label">Interval reference date</label>
        <input type="date" class="form-control" id="referenceDate" @bind-value="@ReferenceDate" />
    </div>

    <div class="col-12 col-md-6 col-xl-4 mb-3">
        <label for="weekendHandling" class="form-label">Weekend handling</label>
        <select class="form-select" id="weekendHandling" @onchange="args => WeekendHandling = Enum.Parse<RecurrencePatternWeekendHandling>(args.Value?.ToString() ?? throw new InvalidOperationException())">
            <option value="@RecurrencePatternWeekendHandling.Include" selected="@(WeekendHandling == RecurrencePatternWeekendHandling.Include)">Include</option>
            <option value="@RecurrencePatternWeekendHandling.Skip" selected="@(WeekendHandling == RecurrencePatternWeekendHandling.Skip)">Skip</option>
            <option value="@RecurrencePatternWeekendHandling.AdjustToMonday" selected="@(WeekendHandling == RecurrencePatternWeekendHandling.AdjustToMonday)">Adjust to Monday</option>
            <option value="@RecurrencePatternWeekendHandling.AdjustToFriday" selected="@(WeekendHandling == RecurrencePatternWeekendHandling.AdjustToFriday)">Adjust to Friday</option>
            <option value="@RecurrencePatternWeekendHandling.AdjustToWeekday" selected="@(WeekendHandling == RecurrencePatternWeekendHandling.AdjustToWeekday)">Adjust to weekday</option>
        </select>
    </div>

    <div class="col-12 col-md-6 col-xl-4 mb-3 align-self-end">
        <button class="btn btn-primary w-100" @onclick="BuildRecurrence">Build recurrence</button>
    </div>
</div>

@if (Recurrence != null) {
    <Calendar Recurrence="Recurrence" NumberOfMonths="3" />
}

@code {
    private int? occurrences;
    private int interval = 1;

    private DateTime? StartDate { get; set; }
    private DateTime? EndDate { get; set; }
    private int? Occurrences {
        get => occurrences;
        set => occurrences = value == null ? null : Math.Max(value.Value, 1);
    }
    private int Interval {
        get => interval;
        set => interval = Math.Max(value, 1);
    }
    private DateTime? ReferenceDate { get; set; }
    private RecurrencePatternWeekendHandling WeekendHandling { get; set; } = RecurrencePatternWeekendHandling.Include;
    private Recurrence? Recurrence { get; set; }

    private void BuildRecurrence() {
        Recurrence = Recurs
            .From(StartDate)
            .Until(EndDate)
            .StopAfter(Occurrences)
            .Every(interval)
            .Days()
            .WithReferenceDate(ReferenceDate)
            .WithWeekendHandling(WeekendHandling)
            .Build();
    }
}
