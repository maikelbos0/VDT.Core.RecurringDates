@page "/WeeklyPattern"

<h1>Weekly pattern</h1>

<p>
    Use below form to build a recurrence that has a pattern that occurs every week or every several weeks. The recurrence is built using a mixture of fluent
    syntax and property assignment on a recurrence builder.
</p>

<div class="row">
    <div class="col-12 col-md-6 col-xl-4 mb-3">
        <label for="startDate" class="form-label">Start date</label>
        <input type="date" class="form-control" id="startDate" @bind-value="@StartDate" />
    </div>

    <div class="col-12 col-md-6 col-xl-4 mb-3">
        <label for="endDate" class="form-label">End date</label>
        <input type="date" class="form-control" id="endDate" @bind-value="@EndDate" />
    </div>

    <div class="col-12 col-md-6 col-xl-4 mb-3">
        <label for="occurrences" class="form-label">Occurrences</label>
        <input type="number" class="form-control" id="occurrences" @bind-value="@Occurrences" min="1" />
    </div>

    <div class="col-12 col-md-6 col-xl-4 mb-3">
        <label for="interval" class="form-label">Interval</label>
        <input type="number" class="form-control" id="interval" @bind-value="@Interval" min="1" />
    </div>

    <div class="col-12 col-md-6 col-xl-4 mb-3">
        <label for="referenceDate" class="form-label">Interval reference date</label>
        <input type="date" class="form-control" id="referenceDate" @bind-value="@ReferenceDate" />
    </div>

    <div class="col-12 col-md-6 col-xl-4 mb-3">
        <label for="firstDayOfWeek" class="form-label">First day of the week</label>
        <select class="form-select" id="firstDayOfWeek" @onchange="SetFirstDayOfWeek">
            <option value="" selected="@(FirstDayOfWeek == null)">(default)</option>
            <option value="@DayOfWeek.Sunday" selected="@(FirstDayOfWeek == DayOfWeek.Sunday)">Sunday</option>
            <option value="@DayOfWeek.Monday" selected="@(FirstDayOfWeek == DayOfWeek.Monday)">Monday</option>
            <option value="@DayOfWeek.Tuesday" selected="@(FirstDayOfWeek == DayOfWeek.Tuesday)">Tuesday</option>
            <option value="@DayOfWeek.Wednesday" selected="@(FirstDayOfWeek == DayOfWeek.Wednesday)">Wednesday</option>
            <option value="@DayOfWeek.Thursday" selected="@(FirstDayOfWeek == DayOfWeek.Thursday)">Thursday</option>
            <option value="@DayOfWeek.Friday" selected="@(FirstDayOfWeek == DayOfWeek.Friday)">Friday</option>
            <option value="@DayOfWeek.Saturday" selected="@(FirstDayOfWeek == DayOfWeek.Saturday)">Saturday</option>
        </select>
    </div>

    <div class="col-12 col-md-6 col-xl-4 mb-3">
        <div>
            <label class="form-label">Days of the week</label>
        </div>
        <Multiselect Items="AllDaysOfWeek" @bind-SelectedItems="DaysOfWeek"/>
    </div>

    <div class="col-12 col-md-6 col-xl-4 mb-3 align-self-end">
        <button class="btn btn-primary w-100" @onclick="BuildRecurrence">Build recurrence</button>
    </div>
</div>

@if (Recurrence != null) {
    <Calendar Recurrence="Recurrence" Months="3" />
}

@code {
    private int? occurrences;
    private int interval = 1;

    private DateTime? StartDate { get; set; }
    private DateTime? EndDate { get; set; }
    private int? Occurrences {
        get => occurrences;
        set => occurrences = value == null ? null : Math.Max(value.Value, 1);
    }
    private int Interval {
        get => interval;
        set => interval = Math.Max(value, 1);
    }
    private DateTime? ReferenceDate { get; set; }
    private DayOfWeek? FirstDayOfWeek { get; set; }
    private List<(DayOfWeek, string)> AllDaysOfWeek { get; } = new() {
        (DayOfWeek.Sunday, "Sunday"),
        (DayOfWeek.Monday, "Monday"),
        (DayOfWeek.Tuesday, "Tuesday"),
        (DayOfWeek.Wednesday, "Wednesday"),
        (DayOfWeek.Thursday, "Thursday"),
        (DayOfWeek.Friday, "Friday"),
        (DayOfWeek.Saturday, "Saturday")
    };
    private List<DayOfWeek> DaysOfWeek { get; set; } = new();
    private Recurrence? Recurrence { get; set; }

    private void SetFirstDayOfWeek(ChangeEventArgs args) {
        var value = args.Value?.ToString();

        if (string.IsNullOrWhiteSpace(value)) {
            FirstDayOfWeek = null;
        }
        else {
            FirstDayOfWeek = Enum.Parse<DayOfWeek>(value);
        }
    }

    private void BuildRecurrence() {
        var builder = Recurs.Every(interval).Weeks().On(DaysOfWeek);

        if (FirstDayOfWeek != null) {
            builder.FirstDayOfWeek = FirstDayOfWeek.Value;
        }

        if (ReferenceDate != null) {
            builder.ReferenceDate = ReferenceDate;
        }

        if (StartDate != null) {
            builder.RecurrenceBuilder.StartDate = StartDate.Value;
        }

        if (EndDate != null) {
            builder.RecurrenceBuilder.EndDate = EndDate.Value;
        }

        if (Occurrences != null) {
            builder.RecurrenceBuilder.Occurrences = Occurrences.Value;
        }

        Recurrence = builder.Build();
    }
}
